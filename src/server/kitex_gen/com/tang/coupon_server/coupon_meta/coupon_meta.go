// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package coupon_meta

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/Tzz1194593491/coupon_server/kitex_gen/com/tang/coupon_server/base"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type CouponMetaType int64

const (
	CouponMetaType_E_COMMERCE CouponMetaType = 0
	CouponMetaType_TO_SHOP    CouponMetaType = 1
)

func (p CouponMetaType) String() string {
	switch p {
	case CouponMetaType_E_COMMERCE:
		return "E_COMMERCE"
	case CouponMetaType_TO_SHOP:
		return "TO_SHOP"
	}
	return "<UNSET>"
}

func CouponMetaTypeFromString(s string) (CouponMetaType, error) {
	switch s {
	case "E_COMMERCE":
		return CouponMetaType_E_COMMERCE, nil
	case "TO_SHOP":
		return CouponMetaType_TO_SHOP, nil
	}
	return CouponMetaType(0), fmt.Errorf("not a valid CouponMetaType string")
}

func CouponMetaTypePtr(v CouponMetaType) *CouponMetaType { return &v }
func (p *CouponMetaType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CouponMetaType(result.Int64)
	return
}

func (p *CouponMetaType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CouponStatus int64

const (
	CouponStatus_EXPIRED     CouponStatus = 0
	CouponStatus_NOT_EXPIRED CouponStatus = 1
)

func (p CouponStatus) String() string {
	switch p {
	case CouponStatus_EXPIRED:
		return "EXPIRED"
	case CouponStatus_NOT_EXPIRED:
		return "NOT_EXPIRED"
	}
	return "<UNSET>"
}

func CouponStatusFromString(s string) (CouponStatus, error) {
	switch s {
	case "EXPIRED":
		return CouponStatus_EXPIRED, nil
	case "NOT_EXPIRED":
		return CouponStatus_NOT_EXPIRED, nil
	}
	return CouponStatus(0), fmt.Errorf("not a valid CouponStatus string")
}

func CouponStatusPtr(v CouponStatus) *CouponStatus { return &v }
func (p *CouponStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CouponStatus(result.Int64)
	return
}

func (p *CouponStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CouponMeta struct {
	CouponMetaNo   int64          `thrift:"coupon_meta_no,1" frugal:"1,default,i64" json:"coupon_meta_no"`
	Type           CouponMetaType `thrift:"type,2" frugal:"2,default,CouponMetaType" json:"type"`
	ValidStartTime string         `thrift:"valid_start_time,3" frugal:"3,default,string" json:"valid_start_time"`
	ValidEndTime   string         `thrift:"valid_end_time,4" frugal:"4,default,string" json:"valid_end_time"`
	Status         CouponStatus   `thrift:"status,5" frugal:"5,default,CouponStatus" json:"status"`
	Stock          int32          `thrift:"stock,6" frugal:"6,default,i32" json:"stock"`
	CreateTime     string         `thrift:"create_time,7" frugal:"7,default,string" json:"create_time"`
	UpdateTime     string         `thrift:"update_time,8" frugal:"8,default,string" json:"update_time"`
	DeleteTime     string         `thrift:"delete_time,9" frugal:"9,default,string" json:"delete_time"`
}

func NewCouponMeta() *CouponMeta {
	return &CouponMeta{}
}

func (p *CouponMeta) InitDefault() {
}

func (p *CouponMeta) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponMeta) GetType() (v CouponMetaType) {
	return p.Type
}

func (p *CouponMeta) GetValidStartTime() (v string) {
	return p.ValidStartTime
}

func (p *CouponMeta) GetValidEndTime() (v string) {
	return p.ValidEndTime
}

func (p *CouponMeta) GetStatus() (v CouponStatus) {
	return p.Status
}

func (p *CouponMeta) GetStock() (v int32) {
	return p.Stock
}

func (p *CouponMeta) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *CouponMeta) GetUpdateTime() (v string) {
	return p.UpdateTime
}

func (p *CouponMeta) GetDeleteTime() (v string) {
	return p.DeleteTime
}
func (p *CouponMeta) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponMeta) SetType(val CouponMetaType) {
	p.Type = val
}
func (p *CouponMeta) SetValidStartTime(val string) {
	p.ValidStartTime = val
}
func (p *CouponMeta) SetValidEndTime(val string) {
	p.ValidEndTime = val
}
func (p *CouponMeta) SetStatus(val CouponStatus) {
	p.Status = val
}
func (p *CouponMeta) SetStock(val int32) {
	p.Stock = val
}
func (p *CouponMeta) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *CouponMeta) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *CouponMeta) SetDeleteTime(val string) {
	p.DeleteTime = val
}

var fieldIDToName_CouponMeta = map[int16]string{
	1: "coupon_meta_no",
	2: "type",
	3: "valid_start_time",
	4: "valid_end_time",
	5: "status",
	6: "stock",
	7: "create_time",
	8: "update_time",
	9: "delete_time",
}

func (p *CouponMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field CouponMetaType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CouponMetaType(v)
	}
	p.Type = _field
	return nil
}
func (p *CouponMeta) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidStartTime = _field
	return nil
}
func (p *CouponMeta) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidEndTime = _field
	return nil
}
func (p *CouponMeta) ReadField5(iprot thrift.TProtocol) error {

	var _field CouponStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CouponStatus(v)
	}
	p.Status = _field
	return nil
}
func (p *CouponMeta) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Stock = _field
	return nil
}
func (p *CouponMeta) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreateTime = _field
	return nil
}
func (p *CouponMeta) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdateTime = _field
	return nil
}
func (p *CouponMeta) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeleteTime = _field
	return nil
}

func (p *CouponMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_start_time", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CouponMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_end_time", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CouponMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CouponMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stock", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Stock); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CouponMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CouponMeta) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("update_time", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CouponMeta) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("delete_time", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeleteTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CouponMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMeta(%+v)", *p)

}

func (p *CouponMeta) DeepEqual(ano *CouponMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.ValidStartTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.ValidEndTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.DeleteTime) {
		return false
	}
	return true
}

func (p *CouponMeta) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponMeta) Field2DeepEqual(src CouponMetaType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *CouponMeta) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ValidStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *CouponMeta) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ValidEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *CouponMeta) Field5DeepEqual(src CouponStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *CouponMeta) Field6DeepEqual(src int32) bool {

	if p.Stock != src {
		return false
	}
	return true
}
func (p *CouponMeta) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CouponMeta) Field8DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CouponMeta) Field9DeepEqual(src string) bool {

	if strings.Compare(p.DeleteTime, src) != 0 {
		return false
	}
	return true
}

type GetCouponMetaReq struct {
	CouponMetaNo *int64             `thrift:"coupon_meta_no,1,optional" frugal:"1,optional,i64" json:"coupon_meta_no,omitempty"`
	Type         *CouponMetaType    `thrift:"type,2,optional" frugal:"2,optional,CouponMetaType" json:"type,omitempty"`
	Status       *CouponStatus      `thrift:"status,3,optional" frugal:"3,optional,CouponStatus" json:"status,omitempty"`
	BaseInfo     *base.BasePageInfo `thrift:"base_info,255,required" frugal:"255,required,base.BasePageInfo" json:"base_info"`
}

func NewGetCouponMetaReq() *GetCouponMetaReq {
	return &GetCouponMetaReq{}
}

func (p *GetCouponMetaReq) InitDefault() {
}

var GetCouponMetaReq_CouponMetaNo_DEFAULT int64

func (p *GetCouponMetaReq) GetCouponMetaNo() (v int64) {
	if !p.IsSetCouponMetaNo() {
		return GetCouponMetaReq_CouponMetaNo_DEFAULT
	}
	return *p.CouponMetaNo
}

var GetCouponMetaReq_Type_DEFAULT CouponMetaType

func (p *GetCouponMetaReq) GetType() (v CouponMetaType) {
	if !p.IsSetType() {
		return GetCouponMetaReq_Type_DEFAULT
	}
	return *p.Type
}

var GetCouponMetaReq_Status_DEFAULT CouponStatus

func (p *GetCouponMetaReq) GetStatus() (v CouponStatus) {
	if !p.IsSetStatus() {
		return GetCouponMetaReq_Status_DEFAULT
	}
	return *p.Status
}

var GetCouponMetaReq_BaseInfo_DEFAULT *base.BasePageInfo

func (p *GetCouponMetaReq) GetBaseInfo() (v *base.BasePageInfo) {
	if !p.IsSetBaseInfo() {
		return GetCouponMetaReq_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *GetCouponMetaReq) SetCouponMetaNo(val *int64) {
	p.CouponMetaNo = val
}
func (p *GetCouponMetaReq) SetType(val *CouponMetaType) {
	p.Type = val
}
func (p *GetCouponMetaReq) SetStatus(val *CouponStatus) {
	p.Status = val
}
func (p *GetCouponMetaReq) SetBaseInfo(val *base.BasePageInfo) {
	p.BaseInfo = val
}

var fieldIDToName_GetCouponMetaReq = map[int16]string{
	1:   "coupon_meta_no",
	2:   "type",
	3:   "status",
	255: "base_info",
}

func (p *GetCouponMetaReq) IsSetCouponMetaNo() bool {
	return p.CouponMetaNo != nil
}

func (p *GetCouponMetaReq) IsSetType() bool {
	return p.Type != nil
}

func (p *GetCouponMetaReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetCouponMetaReq) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *GetCouponMetaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseInfo {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCouponMetaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetCouponMetaReq[fieldId]))
}

func (p *GetCouponMetaReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *GetCouponMetaReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *CouponMetaType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := CouponMetaType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *GetCouponMetaReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *CouponStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := CouponStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *GetCouponMetaReq) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBasePageInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *GetCouponMetaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponMetaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCouponMetaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCouponMetaNo() {
		if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CouponMetaNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCouponMetaReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCouponMetaReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetCouponMetaReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetCouponMetaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCouponMetaReq(%+v)", *p)

}

func (p *GetCouponMetaReq) DeepEqual(ano *GetCouponMetaReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *GetCouponMetaReq) Field1DeepEqual(src *int64) bool {

	if p.CouponMetaNo == src {
		return true
	} else if p.CouponMetaNo == nil || src == nil {
		return false
	}
	if *p.CouponMetaNo != *src {
		return false
	}
	return true
}
func (p *GetCouponMetaReq) Field2DeepEqual(src *CouponMetaType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *GetCouponMetaReq) Field3DeepEqual(src *CouponStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *GetCouponMetaReq) Field255DeepEqual(src *base.BasePageInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type GetCouponMetaResp struct {
	CouponMeta []*CouponMeta      `thrift:"coupon_meta,1" frugal:"1,default,list<CouponMeta>" json:"coupon_meta"`
	BaseInfo   *base.BasePageInfo `thrift:"base_info,2" frugal:"2,default,base.BasePageInfo" json:"base_info"`
	BaseResp   *base.BaseResp     `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetCouponMetaResp() *GetCouponMetaResp {
	return &GetCouponMetaResp{}
}

func (p *GetCouponMetaResp) InitDefault() {
}

func (p *GetCouponMetaResp) GetCouponMeta() (v []*CouponMeta) {
	return p.CouponMeta
}

var GetCouponMetaResp_BaseInfo_DEFAULT *base.BasePageInfo

func (p *GetCouponMetaResp) GetBaseInfo() (v *base.BasePageInfo) {
	if !p.IsSetBaseInfo() {
		return GetCouponMetaResp_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

var GetCouponMetaResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetCouponMetaResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetCouponMetaResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetCouponMetaResp) SetCouponMeta(val []*CouponMeta) {
	p.CouponMeta = val
}
func (p *GetCouponMetaResp) SetBaseInfo(val *base.BasePageInfo) {
	p.BaseInfo = val
}
func (p *GetCouponMetaResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetCouponMetaResp = map[int16]string{
	1:   "coupon_meta",
	2:   "base_info",
	255: "baseResp",
}

func (p *GetCouponMetaResp) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *GetCouponMetaResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetCouponMetaResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCouponMetaResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCouponMetaResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*CouponMeta, 0, size)
	values := make([]CouponMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CouponMeta = _field
	return nil
}
func (p *GetCouponMetaResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewBasePageInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *GetCouponMetaResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetCouponMetaResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponMetaResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCouponMetaResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CouponMeta)); err != nil {
		return err
	}
	for _, v := range p.CouponMeta {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCouponMetaResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCouponMetaResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetCouponMetaResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCouponMetaResp(%+v)", *p)

}

func (p *GetCouponMetaResp) DeepEqual(ano *GetCouponMetaResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMeta) {
		return false
	}
	if !p.Field2DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetCouponMetaResp) Field1DeepEqual(src []*CouponMeta) bool {

	if len(p.CouponMeta) != len(src) {
		return false
	}
	for i, v := range p.CouponMeta {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCouponMetaResp) Field2DeepEqual(src *base.BasePageInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetCouponMetaResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type AddCouponMetaReq struct {
	Type           CouponMetaType `thrift:"type,1,required" frugal:"1,required,CouponMetaType" json:"type"`
	ValidStartTime string         `thrift:"valid_start_time,2,required" frugal:"2,required,string" json:"valid_start_time"`
	ValidEndTime   string         `thrift:"valid_end_time,3,required" frugal:"3,required,string" json:"valid_end_time"`
	Stock          int32          `thrift:"stock,4,required" frugal:"4,required,i32" json:"stock"`
	IsSharding     bool           `thrift:"is_sharding,5,required" frugal:"5,required,bool" json:"is_sharding"`
}

func NewAddCouponMetaReq() *AddCouponMetaReq {
	return &AddCouponMetaReq{}
}

func (p *AddCouponMetaReq) InitDefault() {
}

func (p *AddCouponMetaReq) GetType() (v CouponMetaType) {
	return p.Type
}

func (p *AddCouponMetaReq) GetValidStartTime() (v string) {
	return p.ValidStartTime
}

func (p *AddCouponMetaReq) GetValidEndTime() (v string) {
	return p.ValidEndTime
}

func (p *AddCouponMetaReq) GetStock() (v int32) {
	return p.Stock
}

func (p *AddCouponMetaReq) GetIsSharding() (v bool) {
	return p.IsSharding
}
func (p *AddCouponMetaReq) SetType(val CouponMetaType) {
	p.Type = val
}
func (p *AddCouponMetaReq) SetValidStartTime(val string) {
	p.ValidStartTime = val
}
func (p *AddCouponMetaReq) SetValidEndTime(val string) {
	p.ValidEndTime = val
}
func (p *AddCouponMetaReq) SetStock(val int32) {
	p.Stock = val
}
func (p *AddCouponMetaReq) SetIsSharding(val bool) {
	p.IsSharding = val
}

var fieldIDToName_AddCouponMetaReq = map[int16]string{
	1: "type",
	2: "valid_start_time",
	3: "valid_end_time",
	4: "stock",
	5: "is_sharding",
}

func (p *AddCouponMetaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetValidStartTime bool = false
	var issetValidEndTime bool = false
	var issetStock bool = false
	var issetIsSharding bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValidStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValidEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetStock = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsSharding = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValidStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValidEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetStock {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIsSharding {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddCouponMetaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddCouponMetaReq[fieldId]))
}

func (p *AddCouponMetaReq) ReadField1(iprot thrift.TProtocol) error {

	var _field CouponMetaType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CouponMetaType(v)
	}
	p.Type = _field
	return nil
}
func (p *AddCouponMetaReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidStartTime = _field
	return nil
}
func (p *AddCouponMetaReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidEndTime = _field
	return nil
}
func (p *AddCouponMetaReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Stock = _field
	return nil
}
func (p *AddCouponMetaReq) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSharding = _field
	return nil
}

func (p *AddCouponMetaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddCouponMetaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddCouponMetaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddCouponMetaReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_start_time", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddCouponMetaReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_end_time", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddCouponMetaReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stock", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Stock); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AddCouponMetaReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_sharding", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsSharding); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AddCouponMetaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddCouponMetaReq(%+v)", *p)

}

func (p *AddCouponMetaReq) DeepEqual(ano *AddCouponMetaReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.ValidStartTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.ValidEndTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsSharding) {
		return false
	}
	return true
}

func (p *AddCouponMetaReq) Field1DeepEqual(src CouponMetaType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *AddCouponMetaReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ValidStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *AddCouponMetaReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ValidEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *AddCouponMetaReq) Field4DeepEqual(src int32) bool {

	if p.Stock != src {
		return false
	}
	return true
}
func (p *AddCouponMetaReq) Field5DeepEqual(src bool) bool {

	if p.IsSharding != src {
		return false
	}
	return true
}

type AddCouponMetaResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewAddCouponMetaResp() *AddCouponMetaResp {
	return &AddCouponMetaResp{}
}

func (p *AddCouponMetaResp) InitDefault() {
}

var AddCouponMetaResp_BaseResp_DEFAULT *base.BaseResp

func (p *AddCouponMetaResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return AddCouponMetaResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *AddCouponMetaResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_AddCouponMetaResp = map[int16]string{
	255: "baseResp",
}

func (p *AddCouponMetaResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *AddCouponMetaResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddCouponMetaResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddCouponMetaResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *AddCouponMetaResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddCouponMetaResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddCouponMetaResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AddCouponMetaResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddCouponMetaResp(%+v)", *p)

}

func (p *AddCouponMetaResp) DeepEqual(ano *AddCouponMetaResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *AddCouponMetaResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteCouponMetaReq struct {
	CouponMetaNo int64 `thrift:"coupon_meta_no,1,required" frugal:"1,required,i64" json:"coupon_meta_no"`
}

func NewDeleteCouponMetaReq() *DeleteCouponMetaReq {
	return &DeleteCouponMetaReq{}
}

func (p *DeleteCouponMetaReq) InitDefault() {
}

func (p *DeleteCouponMetaReq) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}
func (p *DeleteCouponMetaReq) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}

var fieldIDToName_DeleteCouponMetaReq = map[int16]string{
	1: "coupon_meta_no",
}

func (p *DeleteCouponMetaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCouponMetaNo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCouponMetaNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCouponMetaNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCouponMetaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteCouponMetaReq[fieldId]))
}

func (p *DeleteCouponMetaReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}

func (p *DeleteCouponMetaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCouponMetaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCouponMetaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCouponMetaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCouponMetaReq(%+v)", *p)

}

func (p *DeleteCouponMetaReq) DeepEqual(ano *DeleteCouponMetaReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	return true
}

func (p *DeleteCouponMetaReq) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}

type DeleteCouponMetaResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewDeleteCouponMetaResp() *DeleteCouponMetaResp {
	return &DeleteCouponMetaResp{}
}

func (p *DeleteCouponMetaResp) InitDefault() {
}

var DeleteCouponMetaResp_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteCouponMetaResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DeleteCouponMetaResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteCouponMetaResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteCouponMetaResp = map[int16]string{
	255: "baseResp",
}

func (p *DeleteCouponMetaResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteCouponMetaResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCouponMetaResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCouponMetaResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteCouponMetaResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCouponMetaResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCouponMetaResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteCouponMetaResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCouponMetaResp(%+v)", *p)

}

func (p *DeleteCouponMetaResp) DeepEqual(ano *DeleteCouponMetaResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteCouponMetaResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateCouponMetaReq struct {
	CouponMetaNo   int64          `thrift:"coupon_meta_no,1,required" frugal:"1,required,i64" json:"coupon_meta_no"`
	Type           CouponMetaType `thrift:"type,2,required" frugal:"2,required,CouponMetaType" json:"type"`
	ValidStartTime string         `thrift:"valid_start_time,3,required" frugal:"3,required,string" json:"valid_start_time"`
	ValidEndTime   string         `thrift:"valid_end_time,4,required" frugal:"4,required,string" json:"valid_end_time"`
	Stock          int32          `thrift:"stock,5,required" frugal:"5,required,i32" json:"stock"`
}

func NewUpdateCouponMetaReq() *UpdateCouponMetaReq {
	return &UpdateCouponMetaReq{}
}

func (p *UpdateCouponMetaReq) InitDefault() {
}

func (p *UpdateCouponMetaReq) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *UpdateCouponMetaReq) GetType() (v CouponMetaType) {
	return p.Type
}

func (p *UpdateCouponMetaReq) GetValidStartTime() (v string) {
	return p.ValidStartTime
}

func (p *UpdateCouponMetaReq) GetValidEndTime() (v string) {
	return p.ValidEndTime
}

func (p *UpdateCouponMetaReq) GetStock() (v int32) {
	return p.Stock
}
func (p *UpdateCouponMetaReq) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *UpdateCouponMetaReq) SetType(val CouponMetaType) {
	p.Type = val
}
func (p *UpdateCouponMetaReq) SetValidStartTime(val string) {
	p.ValidStartTime = val
}
func (p *UpdateCouponMetaReq) SetValidEndTime(val string) {
	p.ValidEndTime = val
}
func (p *UpdateCouponMetaReq) SetStock(val int32) {
	p.Stock = val
}

var fieldIDToName_UpdateCouponMetaReq = map[int16]string{
	1: "coupon_meta_no",
	2: "type",
	3: "valid_start_time",
	4: "valid_end_time",
	5: "stock",
}

func (p *UpdateCouponMetaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCouponMetaNo bool = false
	var issetType bool = false
	var issetValidStartTime bool = false
	var issetValidEndTime bool = false
	var issetStock bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCouponMetaNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValidStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetValidEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStock = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCouponMetaNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValidStartTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetValidEndTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStock {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCouponMetaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateCouponMetaReq[fieldId]))
}

func (p *UpdateCouponMetaReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *UpdateCouponMetaReq) ReadField2(iprot thrift.TProtocol) error {

	var _field CouponMetaType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CouponMetaType(v)
	}
	p.Type = _field
	return nil
}
func (p *UpdateCouponMetaReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidStartTime = _field
	return nil
}
func (p *UpdateCouponMetaReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidEndTime = _field
	return nil
}
func (p *UpdateCouponMetaReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Stock = _field
	return nil
}

func (p *UpdateCouponMetaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCouponMetaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCouponMetaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateCouponMetaReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateCouponMetaReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_start_time", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateCouponMetaReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_end_time", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateCouponMetaReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stock", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Stock); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateCouponMetaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCouponMetaReq(%+v)", *p)

}

func (p *UpdateCouponMetaReq) DeepEqual(ano *UpdateCouponMetaReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.ValidStartTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.ValidEndTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Stock) {
		return false
	}
	return true
}

func (p *UpdateCouponMetaReq) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *UpdateCouponMetaReq) Field2DeepEqual(src CouponMetaType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *UpdateCouponMetaReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ValidStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCouponMetaReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ValidEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCouponMetaReq) Field5DeepEqual(src int32) bool {

	if p.Stock != src {
		return false
	}
	return true
}

type UpdateCouponMetaResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewUpdateCouponMetaResp() *UpdateCouponMetaResp {
	return &UpdateCouponMetaResp{}
}

func (p *UpdateCouponMetaResp) InitDefault() {
}

var UpdateCouponMetaResp_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateCouponMetaResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UpdateCouponMetaResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateCouponMetaResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateCouponMetaResp = map[int16]string{
	255: "baseResp",
}

func (p *UpdateCouponMetaResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateCouponMetaResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCouponMetaResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCouponMetaResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateCouponMetaResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCouponMetaResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCouponMetaResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateCouponMetaResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCouponMetaResp(%+v)", *p)

}

func (p *UpdateCouponMetaResp) DeepEqual(ano *UpdateCouponMetaResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateCouponMetaResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetCouponValidMetaListReq struct {
	CouponMetaNo int64 `thrift:"coupon_meta_no,1,required" frugal:"1,required,i64" json:"coupon_meta_no"`
}

func NewGetCouponValidMetaListReq() *GetCouponValidMetaListReq {
	return &GetCouponValidMetaListReq{}
}

func (p *GetCouponValidMetaListReq) InitDefault() {
}

func (p *GetCouponValidMetaListReq) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}
func (p *GetCouponValidMetaListReq) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}

var fieldIDToName_GetCouponValidMetaListReq = map[int16]string{
	1: "coupon_meta_no",
}

func (p *GetCouponValidMetaListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCouponMetaNo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCouponMetaNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCouponMetaNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCouponValidMetaListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetCouponValidMetaListReq[fieldId]))
}

func (p *GetCouponValidMetaListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}

func (p *GetCouponValidMetaListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponValidMetaListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCouponValidMetaListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCouponValidMetaListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCouponValidMetaListReq(%+v)", *p)

}

func (p *GetCouponValidMetaListReq) DeepEqual(ano *GetCouponValidMetaListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	return true
}

func (p *GetCouponValidMetaListReq) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}

type GetCouponValidMetaListResp struct {
	CouponMetaMap map[string]*CouponMeta `thrift:"coupon_meta_map,1" frugal:"1,default,map<string:CouponMeta>" json:"coupon_meta_map"`
	BaseResp      *base.BaseResp         `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetCouponValidMetaListResp() *GetCouponValidMetaListResp {
	return &GetCouponValidMetaListResp{}
}

func (p *GetCouponValidMetaListResp) InitDefault() {
}

func (p *GetCouponValidMetaListResp) GetCouponMetaMap() (v map[string]*CouponMeta) {
	return p.CouponMetaMap
}

var GetCouponValidMetaListResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetCouponValidMetaListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetCouponValidMetaListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetCouponValidMetaListResp) SetCouponMetaMap(val map[string]*CouponMeta) {
	p.CouponMetaMap = val
}
func (p *GetCouponValidMetaListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetCouponValidMetaListResp = map[int16]string{
	1:   "coupon_meta_map",
	255: "baseResp",
}

func (p *GetCouponValidMetaListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetCouponValidMetaListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCouponValidMetaListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCouponValidMetaListResp) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*CouponMeta, size)
	values := make([]CouponMeta, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.CouponMetaMap = _field
	return nil
}
func (p *GetCouponValidMetaListResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetCouponValidMetaListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponValidMetaListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCouponValidMetaListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_map", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.CouponMetaMap)); err != nil {
		return err
	}
	for k, v := range p.CouponMetaMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCouponValidMetaListResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetCouponValidMetaListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCouponValidMetaListResp(%+v)", *p)

}

func (p *GetCouponValidMetaListResp) DeepEqual(ano *GetCouponValidMetaListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaMap) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetCouponValidMetaListResp) Field1DeepEqual(src map[string]*CouponMeta) bool {

	if len(p.CouponMetaMap) != len(src) {
		return false
	}
	for k, v := range p.CouponMetaMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCouponValidMetaListResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaService interface {
	GetCouponMeta(ctx context.Context, req *GetCouponMetaReq) (r *GetCouponMetaResp, err error)

	AddCouponMeta(ctx context.Context, req *AddCouponMetaReq) (r *AddCouponMetaResp, err error)

	DeleteCouponMeta(ctx context.Context, req *DeleteCouponMetaReq) (r *DeleteCouponMetaResp, err error)

	UpdateCouponMeta(ctx context.Context, req *UpdateCouponMetaReq) (r *UpdateCouponMetaResp, err error)

	GetCouponValidMetaList(ctx context.Context, req *GetCouponValidMetaListReq) (r *GetCouponValidMetaListResp, err error)
}

type CouponMetaServiceGetCouponMetaArgs struct {
	Req *GetCouponMetaReq `thrift:"req,1" frugal:"1,default,GetCouponMetaReq" json:"req"`
}

func NewCouponMetaServiceGetCouponMetaArgs() *CouponMetaServiceGetCouponMetaArgs {
	return &CouponMetaServiceGetCouponMetaArgs{}
}

func (p *CouponMetaServiceGetCouponMetaArgs) InitDefault() {
}

var CouponMetaServiceGetCouponMetaArgs_Req_DEFAULT *GetCouponMetaReq

func (p *CouponMetaServiceGetCouponMetaArgs) GetReq() (v *GetCouponMetaReq) {
	if !p.IsSetReq() {
		return CouponMetaServiceGetCouponMetaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponMetaServiceGetCouponMetaArgs) SetReq(val *GetCouponMetaReq) {
	p.Req = val
}

var fieldIDToName_CouponMetaServiceGetCouponMetaArgs = map[int16]string{
	1: "req",
}

func (p *CouponMetaServiceGetCouponMetaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponMetaServiceGetCouponMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceGetCouponMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCouponMetaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponMetaServiceGetCouponMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceGetCouponMetaArgs(%+v)", *p)

}

func (p *CouponMetaServiceGetCouponMetaArgs) DeepEqual(ano *CouponMetaServiceGetCouponMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponMetaServiceGetCouponMetaArgs) Field1DeepEqual(src *GetCouponMetaReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceGetCouponMetaResult struct {
	Success *GetCouponMetaResp `thrift:"success,0,optional" frugal:"0,optional,GetCouponMetaResp" json:"success,omitempty"`
}

func NewCouponMetaServiceGetCouponMetaResult() *CouponMetaServiceGetCouponMetaResult {
	return &CouponMetaServiceGetCouponMetaResult{}
}

func (p *CouponMetaServiceGetCouponMetaResult) InitDefault() {
}

var CouponMetaServiceGetCouponMetaResult_Success_DEFAULT *GetCouponMetaResp

func (p *CouponMetaServiceGetCouponMetaResult) GetSuccess() (v *GetCouponMetaResp) {
	if !p.IsSetSuccess() {
		return CouponMetaServiceGetCouponMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponMetaServiceGetCouponMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCouponMetaResp)
}

var fieldIDToName_CouponMetaServiceGetCouponMetaResult = map[int16]string{
	0: "success",
}

func (p *CouponMetaServiceGetCouponMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponMetaServiceGetCouponMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceGetCouponMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCouponMetaResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponMetaServiceGetCouponMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceGetCouponMetaResult(%+v)", *p)

}

func (p *CouponMetaServiceGetCouponMetaResult) DeepEqual(ano *CouponMetaServiceGetCouponMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponMetaServiceGetCouponMetaResult) Field0DeepEqual(src *GetCouponMetaResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceAddCouponMetaArgs struct {
	Req *AddCouponMetaReq `thrift:"req,1" frugal:"1,default,AddCouponMetaReq" json:"req"`
}

func NewCouponMetaServiceAddCouponMetaArgs() *CouponMetaServiceAddCouponMetaArgs {
	return &CouponMetaServiceAddCouponMetaArgs{}
}

func (p *CouponMetaServiceAddCouponMetaArgs) InitDefault() {
}

var CouponMetaServiceAddCouponMetaArgs_Req_DEFAULT *AddCouponMetaReq

func (p *CouponMetaServiceAddCouponMetaArgs) GetReq() (v *AddCouponMetaReq) {
	if !p.IsSetReq() {
		return CouponMetaServiceAddCouponMetaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponMetaServiceAddCouponMetaArgs) SetReq(val *AddCouponMetaReq) {
	p.Req = val
}

var fieldIDToName_CouponMetaServiceAddCouponMetaArgs = map[int16]string{
	1: "req",
}

func (p *CouponMetaServiceAddCouponMetaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponMetaServiceAddCouponMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceAddCouponMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddCouponMetaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponMetaServiceAddCouponMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddCouponMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceAddCouponMetaArgs(%+v)", *p)

}

func (p *CouponMetaServiceAddCouponMetaArgs) DeepEqual(ano *CouponMetaServiceAddCouponMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponMetaServiceAddCouponMetaArgs) Field1DeepEqual(src *AddCouponMetaReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceAddCouponMetaResult struct {
	Success *AddCouponMetaResp `thrift:"success,0,optional" frugal:"0,optional,AddCouponMetaResp" json:"success,omitempty"`
}

func NewCouponMetaServiceAddCouponMetaResult() *CouponMetaServiceAddCouponMetaResult {
	return &CouponMetaServiceAddCouponMetaResult{}
}

func (p *CouponMetaServiceAddCouponMetaResult) InitDefault() {
}

var CouponMetaServiceAddCouponMetaResult_Success_DEFAULT *AddCouponMetaResp

func (p *CouponMetaServiceAddCouponMetaResult) GetSuccess() (v *AddCouponMetaResp) {
	if !p.IsSetSuccess() {
		return CouponMetaServiceAddCouponMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponMetaServiceAddCouponMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddCouponMetaResp)
}

var fieldIDToName_CouponMetaServiceAddCouponMetaResult = map[int16]string{
	0: "success",
}

func (p *CouponMetaServiceAddCouponMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponMetaServiceAddCouponMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceAddCouponMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddCouponMetaResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponMetaServiceAddCouponMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddCouponMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponMetaServiceAddCouponMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceAddCouponMetaResult(%+v)", *p)

}

func (p *CouponMetaServiceAddCouponMetaResult) DeepEqual(ano *CouponMetaServiceAddCouponMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponMetaServiceAddCouponMetaResult) Field0DeepEqual(src *AddCouponMetaResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceDeleteCouponMetaArgs struct {
	Req *DeleteCouponMetaReq `thrift:"req,1" frugal:"1,default,DeleteCouponMetaReq" json:"req"`
}

func NewCouponMetaServiceDeleteCouponMetaArgs() *CouponMetaServiceDeleteCouponMetaArgs {
	return &CouponMetaServiceDeleteCouponMetaArgs{}
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) InitDefault() {
}

var CouponMetaServiceDeleteCouponMetaArgs_Req_DEFAULT *DeleteCouponMetaReq

func (p *CouponMetaServiceDeleteCouponMetaArgs) GetReq() (v *DeleteCouponMetaReq) {
	if !p.IsSetReq() {
		return CouponMetaServiceDeleteCouponMetaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponMetaServiceDeleteCouponMetaArgs) SetReq(val *DeleteCouponMetaReq) {
	p.Req = val
}

var fieldIDToName_CouponMetaServiceDeleteCouponMetaArgs = map[int16]string{
	1: "req",
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceDeleteCouponMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCouponMetaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("deleteCouponMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceDeleteCouponMetaArgs(%+v)", *p)

}

func (p *CouponMetaServiceDeleteCouponMetaArgs) DeepEqual(ano *CouponMetaServiceDeleteCouponMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponMetaServiceDeleteCouponMetaArgs) Field1DeepEqual(src *DeleteCouponMetaReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceDeleteCouponMetaResult struct {
	Success *DeleteCouponMetaResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCouponMetaResp" json:"success,omitempty"`
}

func NewCouponMetaServiceDeleteCouponMetaResult() *CouponMetaServiceDeleteCouponMetaResult {
	return &CouponMetaServiceDeleteCouponMetaResult{}
}

func (p *CouponMetaServiceDeleteCouponMetaResult) InitDefault() {
}

var CouponMetaServiceDeleteCouponMetaResult_Success_DEFAULT *DeleteCouponMetaResp

func (p *CouponMetaServiceDeleteCouponMetaResult) GetSuccess() (v *DeleteCouponMetaResp) {
	if !p.IsSetSuccess() {
		return CouponMetaServiceDeleteCouponMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponMetaServiceDeleteCouponMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCouponMetaResp)
}

var fieldIDToName_CouponMetaServiceDeleteCouponMetaResult = map[int16]string{
	0: "success",
}

func (p *CouponMetaServiceDeleteCouponMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponMetaServiceDeleteCouponMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceDeleteCouponMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCouponMetaResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponMetaServiceDeleteCouponMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("deleteCouponMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponMetaServiceDeleteCouponMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceDeleteCouponMetaResult(%+v)", *p)

}

func (p *CouponMetaServiceDeleteCouponMetaResult) DeepEqual(ano *CouponMetaServiceDeleteCouponMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponMetaServiceDeleteCouponMetaResult) Field0DeepEqual(src *DeleteCouponMetaResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceUpdateCouponMetaArgs struct {
	Req *UpdateCouponMetaReq `thrift:"req,1" frugal:"1,default,UpdateCouponMetaReq" json:"req"`
}

func NewCouponMetaServiceUpdateCouponMetaArgs() *CouponMetaServiceUpdateCouponMetaArgs {
	return &CouponMetaServiceUpdateCouponMetaArgs{}
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) InitDefault() {
}

var CouponMetaServiceUpdateCouponMetaArgs_Req_DEFAULT *UpdateCouponMetaReq

func (p *CouponMetaServiceUpdateCouponMetaArgs) GetReq() (v *UpdateCouponMetaReq) {
	if !p.IsSetReq() {
		return CouponMetaServiceUpdateCouponMetaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponMetaServiceUpdateCouponMetaArgs) SetReq(val *UpdateCouponMetaReq) {
	p.Req = val
}

var fieldIDToName_CouponMetaServiceUpdateCouponMetaArgs = map[int16]string{
	1: "req",
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceUpdateCouponMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateCouponMetaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateCouponMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceUpdateCouponMetaArgs(%+v)", *p)

}

func (p *CouponMetaServiceUpdateCouponMetaArgs) DeepEqual(ano *CouponMetaServiceUpdateCouponMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponMetaServiceUpdateCouponMetaArgs) Field1DeepEqual(src *UpdateCouponMetaReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceUpdateCouponMetaResult struct {
	Success *UpdateCouponMetaResp `thrift:"success,0,optional" frugal:"0,optional,UpdateCouponMetaResp" json:"success,omitempty"`
}

func NewCouponMetaServiceUpdateCouponMetaResult() *CouponMetaServiceUpdateCouponMetaResult {
	return &CouponMetaServiceUpdateCouponMetaResult{}
}

func (p *CouponMetaServiceUpdateCouponMetaResult) InitDefault() {
}

var CouponMetaServiceUpdateCouponMetaResult_Success_DEFAULT *UpdateCouponMetaResp

func (p *CouponMetaServiceUpdateCouponMetaResult) GetSuccess() (v *UpdateCouponMetaResp) {
	if !p.IsSetSuccess() {
		return CouponMetaServiceUpdateCouponMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponMetaServiceUpdateCouponMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCouponMetaResp)
}

var fieldIDToName_CouponMetaServiceUpdateCouponMetaResult = map[int16]string{
	0: "success",
}

func (p *CouponMetaServiceUpdateCouponMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponMetaServiceUpdateCouponMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceUpdateCouponMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateCouponMetaResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponMetaServiceUpdateCouponMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateCouponMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponMetaServiceUpdateCouponMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceUpdateCouponMetaResult(%+v)", *p)

}

func (p *CouponMetaServiceUpdateCouponMetaResult) DeepEqual(ano *CouponMetaServiceUpdateCouponMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponMetaServiceUpdateCouponMetaResult) Field0DeepEqual(src *UpdateCouponMetaResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceGetCouponValidMetaListArgs struct {
	Req *GetCouponValidMetaListReq `thrift:"req,1" frugal:"1,default,GetCouponValidMetaListReq" json:"req"`
}

func NewCouponMetaServiceGetCouponValidMetaListArgs() *CouponMetaServiceGetCouponValidMetaListArgs {
	return &CouponMetaServiceGetCouponValidMetaListArgs{}
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) InitDefault() {
}

var CouponMetaServiceGetCouponValidMetaListArgs_Req_DEFAULT *GetCouponValidMetaListReq

func (p *CouponMetaServiceGetCouponValidMetaListArgs) GetReq() (v *GetCouponValidMetaListReq) {
	if !p.IsSetReq() {
		return CouponMetaServiceGetCouponValidMetaListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponMetaServiceGetCouponValidMetaListArgs) SetReq(val *GetCouponValidMetaListReq) {
	p.Req = val
}

var fieldIDToName_CouponMetaServiceGetCouponValidMetaListArgs = map[int16]string{
	1: "req",
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceGetCouponValidMetaListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCouponValidMetaListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getCouponValidMetaList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceGetCouponValidMetaListArgs(%+v)", *p)

}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) DeepEqual(ano *CouponMetaServiceGetCouponValidMetaListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponMetaServiceGetCouponValidMetaListArgs) Field1DeepEqual(src *GetCouponValidMetaListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponMetaServiceGetCouponValidMetaListResult struct {
	Success *GetCouponValidMetaListResp `thrift:"success,0,optional" frugal:"0,optional,GetCouponValidMetaListResp" json:"success,omitempty"`
}

func NewCouponMetaServiceGetCouponValidMetaListResult() *CouponMetaServiceGetCouponValidMetaListResult {
	return &CouponMetaServiceGetCouponValidMetaListResult{}
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) InitDefault() {
}

var CouponMetaServiceGetCouponValidMetaListResult_Success_DEFAULT *GetCouponValidMetaListResp

func (p *CouponMetaServiceGetCouponValidMetaListResult) GetSuccess() (v *GetCouponValidMetaListResp) {
	if !p.IsSetSuccess() {
		return CouponMetaServiceGetCouponValidMetaListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponMetaServiceGetCouponValidMetaListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCouponValidMetaListResp)
}

var fieldIDToName_CouponMetaServiceGetCouponValidMetaListResult = map[int16]string{
	0: "success",
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponMetaServiceGetCouponValidMetaListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCouponValidMetaListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getCouponValidMetaList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponMetaServiceGetCouponValidMetaListResult(%+v)", *p)

}

func (p *CouponMetaServiceGetCouponValidMetaListResult) DeepEqual(ano *CouponMetaServiceGetCouponValidMetaListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponMetaServiceGetCouponValidMetaListResult) Field0DeepEqual(src *GetCouponValidMetaListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
