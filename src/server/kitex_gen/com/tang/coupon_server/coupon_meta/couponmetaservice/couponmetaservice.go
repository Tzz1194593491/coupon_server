// Code generated by Kitex v0.10.3. DO NOT EDIT.

package couponmetaservice

import (
	"context"
	"errors"
	coupon_meta "github.com/Tzz1194593491/coupon_server/kitex_gen/com/tang/coupon_server/coupon_meta"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetCouponMeta": kitex.NewMethodInfo(
		getCouponMetaHandler,
		newCouponMetaServiceGetCouponMetaArgs,
		newCouponMetaServiceGetCouponMetaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddCouponMeta": kitex.NewMethodInfo(
		addCouponMetaHandler,
		newCouponMetaServiceAddCouponMetaArgs,
		newCouponMetaServiceAddCouponMetaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deleteCouponMeta": kitex.NewMethodInfo(
		deleteCouponMetaHandler,
		newCouponMetaServiceDeleteCouponMetaArgs,
		newCouponMetaServiceDeleteCouponMetaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateCouponMeta": kitex.NewMethodInfo(
		updateCouponMetaHandler,
		newCouponMetaServiceUpdateCouponMetaArgs,
		newCouponMetaServiceUpdateCouponMetaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getCouponValidMetaInfo": kitex.NewMethodInfo(
		getCouponValidMetaInfoHandler,
		newCouponMetaServiceGetCouponValidMetaInfoArgs,
		newCouponMetaServiceGetCouponValidMetaInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"TryReduceCouponStock": kitex.NewMethodInfo(
		tryReduceCouponStockHandler,
		newCouponMetaServiceTryReduceCouponStockArgs,
		newCouponMetaServiceTryReduceCouponStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	couponMetaServiceServiceInfo                = NewServiceInfo()
	couponMetaServiceServiceInfoForClient       = NewServiceInfoForClient()
	couponMetaServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return couponMetaServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return couponMetaServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return couponMetaServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CouponMetaService"
	handlerType := (*coupon_meta.CouponMetaService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "coupon_meta",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func getCouponMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceGetCouponMetaArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceGetCouponMetaResult)
	success, err := handler.(coupon_meta.CouponMetaService).GetCouponMeta(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceGetCouponMetaArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceGetCouponMetaArgs()
}

func newCouponMetaServiceGetCouponMetaResult() interface{} {
	return coupon_meta.NewCouponMetaServiceGetCouponMetaResult()
}

func addCouponMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceAddCouponMetaArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceAddCouponMetaResult)
	success, err := handler.(coupon_meta.CouponMetaService).AddCouponMeta(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceAddCouponMetaArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceAddCouponMetaArgs()
}

func newCouponMetaServiceAddCouponMetaResult() interface{} {
	return coupon_meta.NewCouponMetaServiceAddCouponMetaResult()
}

func deleteCouponMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceDeleteCouponMetaArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceDeleteCouponMetaResult)
	success, err := handler.(coupon_meta.CouponMetaService).DeleteCouponMeta(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceDeleteCouponMetaArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceDeleteCouponMetaArgs()
}

func newCouponMetaServiceDeleteCouponMetaResult() interface{} {
	return coupon_meta.NewCouponMetaServiceDeleteCouponMetaResult()
}

func updateCouponMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceUpdateCouponMetaArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceUpdateCouponMetaResult)
	success, err := handler.(coupon_meta.CouponMetaService).UpdateCouponMeta(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceUpdateCouponMetaArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceUpdateCouponMetaArgs()
}

func newCouponMetaServiceUpdateCouponMetaResult() interface{} {
	return coupon_meta.NewCouponMetaServiceUpdateCouponMetaResult()
}

func getCouponValidMetaInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceGetCouponValidMetaInfoArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceGetCouponValidMetaInfoResult)
	success, err := handler.(coupon_meta.CouponMetaService).GetCouponValidMetaInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceGetCouponValidMetaInfoArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceGetCouponValidMetaInfoArgs()
}

func newCouponMetaServiceGetCouponValidMetaInfoResult() interface{} {
	return coupon_meta.NewCouponMetaServiceGetCouponValidMetaInfoResult()
}

func tryReduceCouponStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_meta.CouponMetaServiceTryReduceCouponStockArgs)
	realResult := result.(*coupon_meta.CouponMetaServiceTryReduceCouponStockResult)
	success, err := handler.(coupon_meta.CouponMetaService).TryReduceCouponStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponMetaServiceTryReduceCouponStockArgs() interface{} {
	return coupon_meta.NewCouponMetaServiceTryReduceCouponStockArgs()
}

func newCouponMetaServiceTryReduceCouponStockResult() interface{} {
	return coupon_meta.NewCouponMetaServiceTryReduceCouponStockResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCouponMeta(ctx context.Context, req *coupon_meta.GetCouponMetaReq) (r *coupon_meta.GetCouponMetaResp, err error) {
	var _args coupon_meta.CouponMetaServiceGetCouponMetaArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceGetCouponMetaResult
	if err = p.c.Call(ctx, "GetCouponMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCouponMeta(ctx context.Context, req *coupon_meta.AddCouponMetaReq) (r *coupon_meta.AddCouponMetaResp, err error) {
	var _args coupon_meta.CouponMetaServiceAddCouponMetaArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceAddCouponMetaResult
	if err = p.c.Call(ctx, "AddCouponMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCouponMeta(ctx context.Context, req *coupon_meta.DeleteCouponMetaReq) (r *coupon_meta.DeleteCouponMetaResp, err error) {
	var _args coupon_meta.CouponMetaServiceDeleteCouponMetaArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceDeleteCouponMetaResult
	if err = p.c.Call(ctx, "deleteCouponMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCouponMeta(ctx context.Context, req *coupon_meta.UpdateCouponMetaReq) (r *coupon_meta.UpdateCouponMetaResp, err error) {
	var _args coupon_meta.CouponMetaServiceUpdateCouponMetaArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceUpdateCouponMetaResult
	if err = p.c.Call(ctx, "updateCouponMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCouponValidMetaInfo(ctx context.Context, req *coupon_meta.GetCouponValidMetaInfoReq) (r *coupon_meta.GetCouponValidMetaInfoResp, err error) {
	var _args coupon_meta.CouponMetaServiceGetCouponValidMetaInfoArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceGetCouponValidMetaInfoResult
	if err = p.c.Call(ctx, "getCouponValidMetaInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TryReduceCouponStock(ctx context.Context, req *coupon_meta.TryReduceCouponStockReq) (r *coupon_meta.TryReduceCouponStockResp, err error) {
	var _args coupon_meta.CouponMetaServiceTryReduceCouponStockArgs
	_args.Req = req
	var _result coupon_meta.CouponMetaServiceTryReduceCouponStockResult
	if err = p.c.Call(ctx, "TryReduceCouponStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
