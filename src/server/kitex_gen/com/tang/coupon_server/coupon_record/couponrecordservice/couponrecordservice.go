// Code generated by Kitex v0.10.3. DO NOT EDIT.

package couponrecordservice

import (
	"context"
	"errors"
	coupon_record "github.com/Tzz1194593491/coupon_server/kitex_gen/com/tang/coupon_server/coupon_record"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SendCoupon": kitex.NewMethodInfo(
		sendCouponHandler,
		newCouponRecordServiceSendCouponArgs,
		newCouponRecordServiceSendCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCouponRecordList": kitex.NewMethodInfo(
		getCouponRecordListHandler,
		newCouponRecordServiceGetCouponRecordListArgs,
		newCouponRecordServiceGetCouponRecordListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UseCoupon": kitex.NewMethodInfo(
		useCouponHandler,
		newCouponRecordServiceUseCouponArgs,
		newCouponRecordServiceUseCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	couponRecordServiceServiceInfo                = NewServiceInfo()
	couponRecordServiceServiceInfoForClient       = NewServiceInfoForClient()
	couponRecordServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return couponRecordServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return couponRecordServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return couponRecordServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CouponRecordService"
	handlerType := (*coupon_record.CouponRecordService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "coupon_record",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func sendCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_record.CouponRecordServiceSendCouponArgs)
	realResult := result.(*coupon_record.CouponRecordServiceSendCouponResult)
	success, err := handler.(coupon_record.CouponRecordService).SendCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponRecordServiceSendCouponArgs() interface{} {
	return coupon_record.NewCouponRecordServiceSendCouponArgs()
}

func newCouponRecordServiceSendCouponResult() interface{} {
	return coupon_record.NewCouponRecordServiceSendCouponResult()
}

func getCouponRecordListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_record.CouponRecordServiceGetCouponRecordListArgs)
	realResult := result.(*coupon_record.CouponRecordServiceGetCouponRecordListResult)
	success, err := handler.(coupon_record.CouponRecordService).GetCouponRecordList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponRecordServiceGetCouponRecordListArgs() interface{} {
	return coupon_record.NewCouponRecordServiceGetCouponRecordListArgs()
}

func newCouponRecordServiceGetCouponRecordListResult() interface{} {
	return coupon_record.NewCouponRecordServiceGetCouponRecordListResult()
}

func useCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*coupon_record.CouponRecordServiceUseCouponArgs)
	realResult := result.(*coupon_record.CouponRecordServiceUseCouponResult)
	success, err := handler.(coupon_record.CouponRecordService).UseCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCouponRecordServiceUseCouponArgs() interface{} {
	return coupon_record.NewCouponRecordServiceUseCouponArgs()
}

func newCouponRecordServiceUseCouponResult() interface{} {
	return coupon_record.NewCouponRecordServiceUseCouponResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendCoupon(ctx context.Context, req *coupon_record.CouponRecordSendReq) (r *coupon_record.CouponRecordSendResp, err error) {
	var _args coupon_record.CouponRecordServiceSendCouponArgs
	_args.Req = req
	var _result coupon_record.CouponRecordServiceSendCouponResult
	if err = p.c.Call(ctx, "SendCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCouponRecordList(ctx context.Context, req *coupon_record.CouponRecordListReq) (r *coupon_record.CouponRecordListResp, err error) {
	var _args coupon_record.CouponRecordServiceGetCouponRecordListArgs
	_args.Req = req
	var _result coupon_record.CouponRecordServiceGetCouponRecordListResult
	if err = p.c.Call(ctx, "GetCouponRecordList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UseCoupon(ctx context.Context, req *coupon_record.CouponRecordUsedReq) (r *coupon_record.CouponRecordUsedResp, err error) {
	var _args coupon_record.CouponRecordServiceUseCouponArgs
	_args.Req = req
	var _result coupon_record.CouponRecordServiceUseCouponResult
	if err = p.c.Call(ctx, "UseCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
