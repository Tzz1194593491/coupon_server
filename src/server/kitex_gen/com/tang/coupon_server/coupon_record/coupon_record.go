// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package coupon_record

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/Tzz1194593491/coupon_server/kitex_gen/com/tang/coupon_server/base"
	"github.com/apache/thrift/lib/go/thrift"
)

type CouponRecordStatus int64

const (
	CouponRecordStatus_NOMARL  CouponRecordStatus = 0
	CouponRecordStatus_EXPIRED CouponRecordStatus = 1
	CouponRecordStatus_USERD   CouponRecordStatus = 100
)

func (p CouponRecordStatus) String() string {
	switch p {
	case CouponRecordStatus_NOMARL:
		return "NOMARL"
	case CouponRecordStatus_EXPIRED:
		return "EXPIRED"
	case CouponRecordStatus_USERD:
		return "USERD"
	}
	return "<UNSET>"
}

func CouponRecordStatusFromString(s string) (CouponRecordStatus, error) {
	switch s {
	case "NOMARL":
		return CouponRecordStatus_NOMARL, nil
	case "EXPIRED":
		return CouponRecordStatus_EXPIRED, nil
	case "USERD":
		return CouponRecordStatus_USERD, nil
	}
	return CouponRecordStatus(0), fmt.Errorf("not a valid CouponRecordStatus string")
}

func CouponRecordStatusPtr(v CouponRecordStatus) *CouponRecordStatus { return &v }
func (p *CouponRecordStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CouponRecordStatus(result.Int64)
	return
}

func (p *CouponRecordStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CouponRecord struct {
	CouponNo     int64              `thrift:"coupon_no,1" frugal:"1,default,i64" json:"coupon_no"`
	CouponMetaNo int64              `thrift:"coupon_meta_no,2" frugal:"2,default,i64" json:"coupon_meta_no"`
	UserId       int64              `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
	CouponStatus CouponRecordStatus `thrift:"coupon_status,4" frugal:"4,default,CouponRecordStatus" json:"coupon_status"`
}

func NewCouponRecord() *CouponRecord {
	return &CouponRecord{}
}

func (p *CouponRecord) InitDefault() {
}

func (p *CouponRecord) GetCouponNo() (v int64) {
	return p.CouponNo
}

func (p *CouponRecord) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponRecord) GetUserId() (v int64) {
	return p.UserId
}

func (p *CouponRecord) GetCouponStatus() (v CouponRecordStatus) {
	return p.CouponStatus
}
func (p *CouponRecord) SetCouponNo(val int64) {
	p.CouponNo = val
}
func (p *CouponRecord) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponRecord) SetUserId(val int64) {
	p.UserId = val
}
func (p *CouponRecord) SetCouponStatus(val CouponRecordStatus) {
	p.CouponStatus = val
}

var fieldIDToName_CouponRecord = map[int16]string{
	1: "coupon_no",
	2: "coupon_meta_no",
	3: "user_id",
	4: "coupon_status",
}

func (p *CouponRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponNo = _field
	return nil
}
func (p *CouponRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CouponRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field CouponRecordStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CouponRecordStatus(v)
	}
	p.CouponStatus = _field
	return nil
}

func (p *CouponRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CouponRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_status", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CouponStatus)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CouponRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecord(%+v)", *p)

}

func (p *CouponRecord) DeepEqual(ano *CouponRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field4DeepEqual(ano.CouponStatus) {
		return false
	}
	return true
}

func (p *CouponRecord) Field1DeepEqual(src int64) bool {

	if p.CouponNo != src {
		return false
	}
	return true
}
func (p *CouponRecord) Field2DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponRecord) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CouponRecord) Field4DeepEqual(src CouponRecordStatus) bool {

	if p.CouponStatus != src {
		return false
	}
	return true
}

type CouponRecordSendReq struct {
	CouponMetaNo int64 `thrift:"coupon_meta_no,1" frugal:"1,default,i64" json:"coupon_meta_no"`
	UserId       int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewCouponRecordSendReq() *CouponRecordSendReq {
	return &CouponRecordSendReq{}
}

func (p *CouponRecordSendReq) InitDefault() {
}

func (p *CouponRecordSendReq) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponRecordSendReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *CouponRecordSendReq) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponRecordSendReq) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_CouponRecordSendReq = map[int16]string{
	1: "coupon_meta_no",
	2: "user_id",
}

func (p *CouponRecordSendReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordSendReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordSendReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponRecordSendReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *CouponRecordSendReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordSendReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordSendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordSendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecordSendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordSendReq(%+v)", *p)

}

func (p *CouponRecordSendReq) DeepEqual(ano *CouponRecordSendReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *CouponRecordSendReq) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponRecordSendReq) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type CouponRecordSendResp struct {
	CouponMetaNo int64          `thrift:"coupon_meta_no,1" frugal:"1,default,i64" json:"coupon_meta_no"`
	UserId       int64          `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	BaseResp     *base.BaseResp `thrift:"base_resp,255" frugal:"255,default,base.BaseResp" json:"base_resp"`
}

func NewCouponRecordSendResp() *CouponRecordSendResp {
	return &CouponRecordSendResp{}
}

func (p *CouponRecordSendResp) InitDefault() {
}

func (p *CouponRecordSendResp) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponRecordSendResp) GetUserId() (v int64) {
	return p.UserId
}

var CouponRecordSendResp_BaseResp_DEFAULT *base.BaseResp

func (p *CouponRecordSendResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CouponRecordSendResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CouponRecordSendResp) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponRecordSendResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *CouponRecordSendResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CouponRecordSendResp = map[int16]string{
	1:   "coupon_meta_no",
	2:   "user_id",
	255: "base_resp",
}

func (p *CouponRecordSendResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CouponRecordSendResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordSendResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordSendResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponRecordSendResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CouponRecordSendResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CouponRecordSendResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordSendResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordSendResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordSendResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecordSendResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CouponRecordSendResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordSendResp(%+v)", *p)

}

func (p *CouponRecordSendResp) DeepEqual(ano *CouponRecordSendResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CouponRecordSendResp) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponRecordSendResp) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CouponRecordSendResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordListReq struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewCouponRecordListReq() *CouponRecordListReq {
	return &CouponRecordListReq{}
}

func (p *CouponRecordListReq) InitDefault() {
}

func (p *CouponRecordListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *CouponRecordListReq) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_CouponRecordListReq = map[int16]string{
	1: "user_id",
}

func (p *CouponRecordListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *CouponRecordListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordListReq(%+v)", *p)

}

func (p *CouponRecordListReq) DeepEqual(ano *CouponRecordListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *CouponRecordListReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type CouponRecordListResp struct {
	UserId   int64              `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Records  []*CouponRecord    `thrift:"records,2" frugal:"2,default,list<CouponRecord>" json:"records"`
	BaseInfo *base.BasePageInfo `thrift:"base_info,3" frugal:"3,default,base.BasePageInfo" json:"base_info"`
	BaseResp *base.BaseResp     `thrift:"base_resp,255" frugal:"255,default,base.BaseResp" json:"base_resp"`
}

func NewCouponRecordListResp() *CouponRecordListResp {
	return &CouponRecordListResp{}
}

func (p *CouponRecordListResp) InitDefault() {
}

func (p *CouponRecordListResp) GetUserId() (v int64) {
	return p.UserId
}

func (p *CouponRecordListResp) GetRecords() (v []*CouponRecord) {
	return p.Records
}

var CouponRecordListResp_BaseInfo_DEFAULT *base.BasePageInfo

func (p *CouponRecordListResp) GetBaseInfo() (v *base.BasePageInfo) {
	if !p.IsSetBaseInfo() {
		return CouponRecordListResp_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

var CouponRecordListResp_BaseResp_DEFAULT *base.BaseResp

func (p *CouponRecordListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CouponRecordListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CouponRecordListResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *CouponRecordListResp) SetRecords(val []*CouponRecord) {
	p.Records = val
}
func (p *CouponRecordListResp) SetBaseInfo(val *base.BasePageInfo) {
	p.BaseInfo = val
}
func (p *CouponRecordListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CouponRecordListResp = map[int16]string{
	1:   "user_id",
	2:   "records",
	3:   "base_info",
	255: "base_resp",
}

func (p *CouponRecordListResp) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *CouponRecordListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CouponRecordListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordListResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CouponRecordListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*CouponRecord, 0, size)
	values := make([]CouponRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Records = _field
	return nil
}
func (p *CouponRecordListResp) ReadField3(iprot thrift.TProtocol) error {
	_field := base.NewBasePageInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *CouponRecordListResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CouponRecordListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return err
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecordListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CouponRecordListResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CouponRecordListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordListResp(%+v)", *p)

}

func (p *CouponRecordListResp) DeepEqual(ano *CouponRecordListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Records) {
		return false
	}
	if !p.Field3DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CouponRecordListResp) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CouponRecordListResp) Field2DeepEqual(src []*CouponRecord) bool {

	if len(p.Records) != len(src) {
		return false
	}
	for i, v := range p.Records {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CouponRecordListResp) Field3DeepEqual(src *base.BasePageInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CouponRecordListResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordUsedReq struct {
	CouponMetaNo int64 `thrift:"coupon_meta_no,1" frugal:"1,default,i64" json:"coupon_meta_no"`
	UserId       int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewCouponRecordUsedReq() *CouponRecordUsedReq {
	return &CouponRecordUsedReq{}
}

func (p *CouponRecordUsedReq) InitDefault() {
}

func (p *CouponRecordUsedReq) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponRecordUsedReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *CouponRecordUsedReq) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponRecordUsedReq) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_CouponRecordUsedReq = map[int16]string{
	1: "coupon_meta_no",
	2: "user_id",
}

func (p *CouponRecordUsedReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordUsedReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordUsedReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponRecordUsedReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *CouponRecordUsedReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordUsedReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordUsedReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordUsedReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecordUsedReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordUsedReq(%+v)", *p)

}

func (p *CouponRecordUsedReq) DeepEqual(ano *CouponRecordUsedReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *CouponRecordUsedReq) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponRecordUsedReq) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type CouponRecordUsedResp struct {
	CouponMetaNo int64          `thrift:"coupon_meta_no,1" frugal:"1,default,i64" json:"coupon_meta_no"`
	UserId       int64          `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	BaseResp     *base.BaseResp `thrift:"base_resp,255" frugal:"255,default,base.BaseResp" json:"base_resp"`
}

func NewCouponRecordUsedResp() *CouponRecordUsedResp {
	return &CouponRecordUsedResp{}
}

func (p *CouponRecordUsedResp) InitDefault() {
}

func (p *CouponRecordUsedResp) GetCouponMetaNo() (v int64) {
	return p.CouponMetaNo
}

func (p *CouponRecordUsedResp) GetUserId() (v int64) {
	return p.UserId
}

var CouponRecordUsedResp_BaseResp_DEFAULT *base.BaseResp

func (p *CouponRecordUsedResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CouponRecordUsedResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CouponRecordUsedResp) SetCouponMetaNo(val int64) {
	p.CouponMetaNo = val
}
func (p *CouponRecordUsedResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *CouponRecordUsedResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CouponRecordUsedResp = map[int16]string{
	1:   "coupon_meta_no",
	2:   "user_id",
	255: "base_resp",
}

func (p *CouponRecordUsedResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CouponRecordUsedResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordUsedResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordUsedResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CouponMetaNo = _field
	return nil
}
func (p *CouponRecordUsedResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CouponRecordUsedResp) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CouponRecordUsedResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CouponRecordUsedResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordUsedResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("coupon_meta_no", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CouponMetaNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordUsedResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CouponRecordUsedResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CouponRecordUsedResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordUsedResp(%+v)", *p)

}

func (p *CouponRecordUsedResp) DeepEqual(ano *CouponRecordUsedResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponMetaNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CouponRecordUsedResp) Field1DeepEqual(src int64) bool {

	if p.CouponMetaNo != src {
		return false
	}
	return true
}
func (p *CouponRecordUsedResp) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CouponRecordUsedResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordService interface {
	SendCoupon(ctx context.Context, req *CouponRecordSendReq) (r *CouponRecordSendResp, err error)

	GetCouponRecordList(ctx context.Context, req *CouponRecordListReq) (r *CouponRecordListResp, err error)

	UseCoupon(ctx context.Context, req *CouponRecordUsedReq) (r *CouponRecordUsedResp, err error)
}

type CouponRecordServiceSendCouponArgs struct {
	Req *CouponRecordSendReq `thrift:"req,1" frugal:"1,default,CouponRecordSendReq" json:"req"`
}

func NewCouponRecordServiceSendCouponArgs() *CouponRecordServiceSendCouponArgs {
	return &CouponRecordServiceSendCouponArgs{}
}

func (p *CouponRecordServiceSendCouponArgs) InitDefault() {
}

var CouponRecordServiceSendCouponArgs_Req_DEFAULT *CouponRecordSendReq

func (p *CouponRecordServiceSendCouponArgs) GetReq() (v *CouponRecordSendReq) {
	if !p.IsSetReq() {
		return CouponRecordServiceSendCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponRecordServiceSendCouponArgs) SetReq(val *CouponRecordSendReq) {
	p.Req = val
}

var fieldIDToName_CouponRecordServiceSendCouponArgs = map[int16]string{
	1: "req",
}

func (p *CouponRecordServiceSendCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponRecordServiceSendCouponArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceSendCouponArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCouponRecordSendReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponRecordServiceSendCouponArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendCoupon_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceSendCouponArgs(%+v)", *p)

}

func (p *CouponRecordServiceSendCouponArgs) DeepEqual(ano *CouponRecordServiceSendCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponRecordServiceSendCouponArgs) Field1DeepEqual(src *CouponRecordSendReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordServiceSendCouponResult struct {
	Success *CouponRecordSendResp `thrift:"success,0,optional" frugal:"0,optional,CouponRecordSendResp" json:"success,omitempty"`
}

func NewCouponRecordServiceSendCouponResult() *CouponRecordServiceSendCouponResult {
	return &CouponRecordServiceSendCouponResult{}
}

func (p *CouponRecordServiceSendCouponResult) InitDefault() {
}

var CouponRecordServiceSendCouponResult_Success_DEFAULT *CouponRecordSendResp

func (p *CouponRecordServiceSendCouponResult) GetSuccess() (v *CouponRecordSendResp) {
	if !p.IsSetSuccess() {
		return CouponRecordServiceSendCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponRecordServiceSendCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*CouponRecordSendResp)
}

var fieldIDToName_CouponRecordServiceSendCouponResult = map[int16]string{
	0: "success",
}

func (p *CouponRecordServiceSendCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponRecordServiceSendCouponResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceSendCouponResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCouponRecordSendResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponRecordServiceSendCouponResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendCoupon_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponRecordServiceSendCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceSendCouponResult(%+v)", *p)

}

func (p *CouponRecordServiceSendCouponResult) DeepEqual(ano *CouponRecordServiceSendCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponRecordServiceSendCouponResult) Field0DeepEqual(src *CouponRecordSendResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordServiceGetCouponRecordListArgs struct {
	Req *CouponRecordListReq `thrift:"req,1" frugal:"1,default,CouponRecordListReq" json:"req"`
}

func NewCouponRecordServiceGetCouponRecordListArgs() *CouponRecordServiceGetCouponRecordListArgs {
	return &CouponRecordServiceGetCouponRecordListArgs{}
}

func (p *CouponRecordServiceGetCouponRecordListArgs) InitDefault() {
}

var CouponRecordServiceGetCouponRecordListArgs_Req_DEFAULT *CouponRecordListReq

func (p *CouponRecordServiceGetCouponRecordListArgs) GetReq() (v *CouponRecordListReq) {
	if !p.IsSetReq() {
		return CouponRecordServiceGetCouponRecordListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponRecordServiceGetCouponRecordListArgs) SetReq(val *CouponRecordListReq) {
	p.Req = val
}

var fieldIDToName_CouponRecordServiceGetCouponRecordListArgs = map[int16]string{
	1: "req",
}

func (p *CouponRecordServiceGetCouponRecordListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponRecordServiceGetCouponRecordListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceGetCouponRecordListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCouponRecordListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponRecordServiceGetCouponRecordListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponRecordList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceGetCouponRecordListArgs(%+v)", *p)

}

func (p *CouponRecordServiceGetCouponRecordListArgs) DeepEqual(ano *CouponRecordServiceGetCouponRecordListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponRecordServiceGetCouponRecordListArgs) Field1DeepEqual(src *CouponRecordListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordServiceGetCouponRecordListResult struct {
	Success *CouponRecordListResp `thrift:"success,0,optional" frugal:"0,optional,CouponRecordListResp" json:"success,omitempty"`
}

func NewCouponRecordServiceGetCouponRecordListResult() *CouponRecordServiceGetCouponRecordListResult {
	return &CouponRecordServiceGetCouponRecordListResult{}
}

func (p *CouponRecordServiceGetCouponRecordListResult) InitDefault() {
}

var CouponRecordServiceGetCouponRecordListResult_Success_DEFAULT *CouponRecordListResp

func (p *CouponRecordServiceGetCouponRecordListResult) GetSuccess() (v *CouponRecordListResp) {
	if !p.IsSetSuccess() {
		return CouponRecordServiceGetCouponRecordListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponRecordServiceGetCouponRecordListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CouponRecordListResp)
}

var fieldIDToName_CouponRecordServiceGetCouponRecordListResult = map[int16]string{
	0: "success",
}

func (p *CouponRecordServiceGetCouponRecordListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponRecordServiceGetCouponRecordListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceGetCouponRecordListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCouponRecordListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponRecordServiceGetCouponRecordListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCouponRecordList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponRecordServiceGetCouponRecordListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceGetCouponRecordListResult(%+v)", *p)

}

func (p *CouponRecordServiceGetCouponRecordListResult) DeepEqual(ano *CouponRecordServiceGetCouponRecordListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponRecordServiceGetCouponRecordListResult) Field0DeepEqual(src *CouponRecordListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordServiceUseCouponArgs struct {
	Req *CouponRecordUsedReq `thrift:"req,1" frugal:"1,default,CouponRecordUsedReq" json:"req"`
}

func NewCouponRecordServiceUseCouponArgs() *CouponRecordServiceUseCouponArgs {
	return &CouponRecordServiceUseCouponArgs{}
}

func (p *CouponRecordServiceUseCouponArgs) InitDefault() {
}

var CouponRecordServiceUseCouponArgs_Req_DEFAULT *CouponRecordUsedReq

func (p *CouponRecordServiceUseCouponArgs) GetReq() (v *CouponRecordUsedReq) {
	if !p.IsSetReq() {
		return CouponRecordServiceUseCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CouponRecordServiceUseCouponArgs) SetReq(val *CouponRecordUsedReq) {
	p.Req = val
}

var fieldIDToName_CouponRecordServiceUseCouponArgs = map[int16]string{
	1: "req",
}

func (p *CouponRecordServiceUseCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CouponRecordServiceUseCouponArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceUseCouponArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCouponRecordUsedReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CouponRecordServiceUseCouponArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UseCoupon_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceUseCouponArgs(%+v)", *p)

}

func (p *CouponRecordServiceUseCouponArgs) DeepEqual(ano *CouponRecordServiceUseCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CouponRecordServiceUseCouponArgs) Field1DeepEqual(src *CouponRecordUsedReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CouponRecordServiceUseCouponResult struct {
	Success *CouponRecordUsedResp `thrift:"success,0,optional" frugal:"0,optional,CouponRecordUsedResp" json:"success,omitempty"`
}

func NewCouponRecordServiceUseCouponResult() *CouponRecordServiceUseCouponResult {
	return &CouponRecordServiceUseCouponResult{}
}

func (p *CouponRecordServiceUseCouponResult) InitDefault() {
}

var CouponRecordServiceUseCouponResult_Success_DEFAULT *CouponRecordUsedResp

func (p *CouponRecordServiceUseCouponResult) GetSuccess() (v *CouponRecordUsedResp) {
	if !p.IsSetSuccess() {
		return CouponRecordServiceUseCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CouponRecordServiceUseCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*CouponRecordUsedResp)
}

var fieldIDToName_CouponRecordServiceUseCouponResult = map[int16]string{
	0: "success",
}

func (p *CouponRecordServiceUseCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CouponRecordServiceUseCouponResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CouponRecordServiceUseCouponResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCouponRecordUsedResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CouponRecordServiceUseCouponResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UseCoupon_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CouponRecordServiceUseCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CouponRecordServiceUseCouponResult(%+v)", *p)

}

func (p *CouponRecordServiceUseCouponResult) DeepEqual(ano *CouponRecordServiceUseCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CouponRecordServiceUseCouponResult) Field0DeepEqual(src *CouponRecordUsedResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
